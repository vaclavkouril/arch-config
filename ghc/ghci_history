:q
main
:q
:q
:q
:q
:q
runDFA (nfaToDfa $ regexToNFA (regexFromString "a(bc)*")) "abcbcc"
runDFA (nfaToDfa $ regexToNFA (regexFromString "a(bc)*")) "abcbcbc"
runDFA (nfaToDfa $ regexToNFA (regexFromString "a(bc)*")) "abcbc"
runDFA (nfaToDfa $ regexToNFA (regexFromString "a(bc)*")) "abc"
runDFA (nfaToDfa $ regexToNFA (regexFromString "a(bc)*")) "bc"
runDFA (nfaToDfa $ regexToNFA (regexFromString "a(bc)*")) "a"
runDfa (nfaToDfa $ regexToNFA (regexFromString "a(bc)*")) "a"
:l RegexToNFA
:l RegexToNFA
runDfa (nfaToDfa $ regexToNFA (regexFromString "a(bc)*")) "a"
runDfa (nfaToDfa $ regexToNFA (regexFromString "a(bc)*") "a"
nfaToDfa $ regexToNFA (regexFromString "a(bc)*")
:l RegexToNFA
:l RegexToNFA FiniteAutomata
:l RegexToNFA FiniteAutomata (nfaToDfa )
:l RegexToNFA, FiniteAutomata
ls
:l RegexToNFA
:l FiniteAutomata RegexToNFA.hs
:l FiniteAutomata
nfaToDfa $ regexToNFA (regexFromString "a(bc)*")
regexToNFA (regexFromString "a(bc)*")
regexFromString "a(bc)*"
:q
:l FiniteAutomata RegexToNFA:q
reg = regexFromString
:l FiniteAutomata RegexToNFA
:q
:q
:q
:q
main
:q
regexFromString "(aaadsadsdasdas*)"
regexFromString "(a*)"
regexFromString "(a**)"
regexFromString "(a)"
regexFromString "()"
regexFromString ")"
regexFromString "()"
regexFromString "()"
regexFromString "(()"
regexFromString ""
regexFromString "|*"
regexFromString "s*"
regexFromString "*"
regexFromString "a*"
:l RegexToNFA
regexFromString "a*"
main 
:l Main.hs 
regexFromString "a(bc)*"
regexFromString "a(bc)*"
regexFromString "(a(bc)*)"
regexFromString "(a|(bc)*)"
regexFromString (a(bc)*)
regexFromString a(bc)*
:l RegexToNFA
regexFromString
:l Main
:l Main
:q
main
:q
main
:l Main
main
:l Main
:l Main
main
:l Main
main
:l Main
main
:l Main
:l Main
fromString "((a|(aib)*))*"
fromString "((a|(aib)*))*"
:l Main.hs 
fromString "((a|(aib)*))*"
fromString "((a|(aib)*))*"
fromString "((a|b))*"
:l Main.hs 
fromString "((a|b))*"
fromString "(a|b)"
toNFA 
:l Main.hs 
:l Main.hs 
:l
main
:q
:q
:q
