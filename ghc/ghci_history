:q
a !! 4
a !! 2
a
let a = [1..6]
a
le a = [1..6]
mapM_ print (allBalanced 5)
mapM_ print (allBalanced 6)
allBalanced 4
allBalanced 3
allBalanced 2
allBalanced 1
:l test.hs 
:l test.hs 
:q
mapM_ print (allBalanced 4)
allBalanced 3
:l all_balanced_binary_tree.hs 
allBalanced 3
:l all_balanced_binary_tree.hs 
allBalanced 3
:l all_balanced_binary_tree.hs 
allBalanced 3
allBalanced 2
mapM_ print (allBalanced 4)
:l all_balanced_binary_tree.hs 
:l all_balanced_binary_tree.hs 
mapM_ print (allBalanced 4)
        # TODO: validate if all are in the bounds
allBalanced 3
allBalanced 5
:q
allBalanced 5
:l all_balanced_binary_tree.hs 
allBalanced 2
allBalanced 3
mapM_ print (allBalanced 4)
:l test.hs 
allBalanced 3
mapM_ print (allBalanced 4)
allBalanced 3
:l test.hs 
allBalanced 2
:l test.hs 
:l test.hs 
:l test.hs 
:l test.hs 
:l test.hs 
allBalanced 2
allBalanced 1
allBalanced 0
:l test.hs 
:l all_balanced_binary_tree.hs 
:l all_balanced_binary_tree.hs 
:q
distinct_sum 10000 2
distinct_sum 1000000000 2
distinct_sum 4000 2
distinct_sum 100 3
distinct_sum 10000 3
distinct_sum 1000 2
:q
distinct_sum 100 2
distinct_sum 4000 3
distinct_sum 500 2
:l ramanujam.hs 
exit
exit
distinct_sum 500 2
distinct_sum 4000 3
:l ramanujam.hs 
:l ramanujam.hs 
distinct_sum 4000 3
:l ramanujam.hs 
distinct_sum 400 3
distinct_sum 500 2
:l ramanujam.hs 
distinct_sum 500 2
distinct_sum 5 3
:l ramanujam.hs 
distinct_sum 5 3
distinct_sum 500 2
:l ramanujam.hs 
:l ramanujam.hs 
:l ramanujam.hs 
:l ramanujam.hs 
:l ramanujam.hs 
:l ramanujam.hs 
distinct_sum 500 2
:l ramanujam.hs 
distinct_sum 500 2
:l ramanujam.hs 
:l ramanujam.hs 
:l ramanujam.hs 
distinct_sum 500 2
:l ramanujam.hs 
distinct_sum 500 2
:l ramanujam.hs 
distinct_sum 500 2
